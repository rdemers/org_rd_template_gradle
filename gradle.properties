#
# R. Demers; 2021.
# Global variables for plugins.
# Use set {} whener possible. See java-common.gradle for an example.
#

# Plugins version.
pluginSpringbootVersion       = 2.4.2

# Changing JVM settings for the build VM.
# org.gradle.jvmargs=-Xmx2g -XX:MaxMetaspaceSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8

# When set to true, Gradle will reuse task outputs from any previous build, when possible,
# resulting is much faster builds. Learn more about using the build cache.
org.gradle.caching=false

# When set to true, individual input property hashes and the build cache key for each task
# are logged on the console. Learn more about task output caching.
org.gradle.caching.debug=false

# Enables incubating configuration on demand, where Gradle will attempt to configure only
# necessary projects.
org.gradle.configureondemand=false

# Customize console output coloring or verbosity. Default depends on how Gradle is invoked.
# See command-line logging for additional details.
org.gradle.console=rich

# When set to true the Gradle Daemon is used to run the build. Default is true.
org.gradle.daemon=false

# Gradle Daemon will terminate itself after specified number of idle milliseconds. Default is 10800000 (3 hours).
# ##### org.gradle.daemon.idletimeout=...

# When set to true, Gradle will run the build with remote debugging enabled, listening on port 5005. Note that this 
# is the equivalent of adding -agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005 to the JVM command line 
# and will suspend the virtual machine until a debugger is attached. Default is false.
org.gradle.debug=false

# Specifies the Java home for the Gradle build process. The value can be set to either a jdk or jre location, however, 
# depending on what your build does, using a JDK is safer. A reasonable default is derived from your environment (JAVA_HOME 
# or the path to java) if the setting is unspecified. This does not affect the version of Java used to launch the Gradle 
# client VM (see Environment variables).
# ##### org.gradle.java.home=(path to JDK home)

# Specifies the JVM arguments used for the Gradle Daemon. The setting is particularly useful for configuring JVM memory 
# settings for build performance. This does not affect the JVM settings for the Gradle client VM.
# ##### org.gradle.jvmargs=(JVM arguments)

# When set to quiet, warn, lifecycle, info, or debug, Gradle will use this log level. The values are not case sensitive. 
# The lifecycle level is the default. See Choosing a log level.
# org.gradle.logging.level=(quiet,warn,lifecycle,info,debug)
org.gradle.logging.level=info

# When configured, Gradle will fork up to org.gradle.workers.max JVMs to execute projects in
# parallel. To learn more about parallel task execution, see the section on Gradle build performance.
org.gradle.parallel=false

# Specifies the scheduling priority for the Gradle daemon and all processes launched by it. Default is normal. 
# See also performance command-line options.
org.gradle.priority=normal

# Configures verbose logging when watching the file system. Default is off.
org.gradle.vfs.verbose=false
 
# Toggles watching the file system. Allows Gradle to re-use information about the file system in the next build. Default is off.
org.gradle.vfs.watch=false

# When set to all, summary or none, Gradle will use different warning type display. See Command- line logging options for details.
# org.gradle.warning.mode=(all,fail,summary,none)
org.gradle.warning.mode=all

# When configured, Gradle will use a maximum of the given number of workers. Default is number of CPU processors. 
# See also performance command-line options.
org.gradle.workers.max=1

